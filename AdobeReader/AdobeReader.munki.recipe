<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Description</key>
	<string>Downloads the latest Adobe Reader and imports into Munki.
For OS_VERSION, 'Mac OS 10.15.0' or 'Mac OS 12.0' are valid, not 10.15 or 12.0

Additional notes:
- Reader ships as an installer pkg that deploys a .app
- Due to name changes, we add multiple variations on .app names to blocking_applications.
- An installs array is also generated for the .app.
- The preinstall_script is there to get around an oversight in the package's
preflight script, looking to find a user's trash folder to copy the .app into.
</string>
	<key>Identifier</key>
	<string>com.github.autopkg.munki.AdobeReader</string>
	<key>Input</key>
	<dict>
		<key>MUNKI_REPO_SUBDIR</key>
		<string>apps/Adobe</string>
		<key>NAME</key>
		<string>AdobeReader</string>
		<key>OS_VERSION</key>
		<string>Mac OS 12.0</string>
		<key>pkginfo</key>
		<dict>
			<key>blocking_applications</key>
			<array>
				<string>Adobe Acrobat Pro.app</string>
				<string>Adobe Acrobat Reader DC.app</string>
				<string>Adobe Acrobat Reader.app</string>
				<string>Adobe Acrobat.app</string>
				<string>Adobe Reader.app</string>
			</array>
			<key>catalogs</key>
			<array>
				<string>testing</string>
			</array>
			<key>description</key>
			<string>Adobe® Reader® is the global standard for reliably viewing, printing, and commenting on PDF documents. It's the only PDF file viewer that can open and interact with all types of PDF content, including forms and multimedia.</string>
			<key>display_name</key>
			<string>Adobe Reader</string>
			<key>minimum_os_version</key>
			<string>10.15.0</string>
			<key>name</key>
			<string>%NAME%</string>
			<key>preinstall_script</key>
			<string>#!/bin/sh
if [ -e "/Applications/Adobe Acrobat Reader.app" ]; then
	rm -r "/Applications/Adobe Acrobat Reader.app"
fi
if [ -e "/Applications/Adobe Acrobat Reader DC.app" ]; then
	rm -r "/Applications/Adobe Acrobat Reader DC.app"
fi
exit 0
</string>
			<key>unattended_install</key>
			<true/>
		</dict>
	</dict>
	<key>MinimumVersion</key>
	<string>1.4</string>
	<key>ParentRecipe</key>
	<string>com.github.autopkg.download.AdobeReader</string>
	<key>Process</key>
	<array>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>flat_pkg_path</key>
				<string>%pathname%/*.pkg</string>
				<key>destination_path</key>
				<string>%RECIPE_CACHE_DIR%/pkg_unpack</string>
				<key>purge_destination</key>
				<true/>
			</dict>
			<key>Processor</key>
			<string>FlatPkgUnpacker</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>pkgroot</key>
				<string>%RECIPE_CACHE_DIR%/application_payload/Applications</string>
				<key>pkgdirs</key>
				<dict/>
			</dict>
			<key>Processor</key>
			<string>PkgRootCreator</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>pkg_payload_path</key>
				<string>%RECIPE_CACHE_DIR%/pkg_unpack/application.pkg/Payload</string>
				<key>destination_path</key>
				<string>%RECIPE_CACHE_DIR%/application_payload/Applications</string>
				<key>purge_destination</key>
				<true/>
			</dict>
			<key>Processor</key>
			<string>PkgPayloadUnpacker</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>faux_root</key>
				<string>%RECIPE_CACHE_DIR%/application_payload</string>
				<key>installs_item_paths</key>
				<array>
					<string>/Applications/Adobe Acrobat Reader.app</string>
				</array>
			</dict>
			<key>Processor</key>
			<string>MunkiInstallsItemsCreator</string>
		</dict>
		<dict>
			<key>Processor</key>
			<string>MunkiPkginfoMerger</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>info_path</key>
				<string>%RECIPE_CACHE_DIR%/application_payload/Applications/Adobe Acrobat Reader.app/Contents/Info.plist</string>
				<key>plist_keys</key>
				<dict>
					<key>CFBundleShortVersionString</key>
					<string>app_version</string>
				</dict>
			</dict>
			<key>Processor</key>
			<string>PlistReader</string>
		</dict>
		<dict>
			<key>Processor</key>
			<string>MunkiPkginfoMerger</string>
			<key>Arguments</key>
			<dict>
				<key>additional_pkginfo</key>
				<dict>
					<key>version</key>
					<string>%app_version%</string>
					<key>installcheck_script</key>
					<string>#!/usr/local/munki/munki-python

import os
import plistlib
import sys
sys.path.insert(0, &apos;/usr/local/munki&apos;)
from munkilib.pkgutils import MunkiLooseVersion as LooseVersion

def read_plist(plist_path):
	&quot;&quot;&quot;Reads a plist file and returns its contents as a dictionary.&quot;&quot;&quot;
	print(f&quot;Reading plist from: {plist_path}&quot;)
	if os.path.exists(plist_path):
		with open(plist_path, &apos;rb&apos;) as plist_file:
			return plistlib.load(plist_file)
	else:
		print(f&quot;Plist not found: {plist_path}&quot;)
		return None

def check_acrobat_installed():
	&quot;&quot;&quot;Check if Adobe Acrobat.app exists and if AcroSCA key is True.&quot;&quot;&quot;
	acrobat_app_path = &apos;/Applications/Adobe Acrobat DC/Adobe Acrobat.app&apos;
	acrobat_plist_path = os.path.join(acrobat_app_path, &apos;Contents&apos;, &apos;Info.plist&apos;)

	# Check if Adobe Acrobat.app exists
	if not os.path.exists(acrobat_app_path):
		print(&quot;Adobe Acrobat DC is not installed.&quot;)
		return False

	# Read the Info.plist of Adobe Acrobat.app
	print(&quot;Adobe Acrobat DC is installed, checking Info.plist...&quot;)
	acrobat_plist = read_plist(acrobat_plist_path)
	if acrobat_plist is None:
		print(&quot;Failed to read Info.plist for Adobe Acrobat DC.&quot;)
		return False

	# Check if the AcroSCA key exists and if it&apos;s True
	acrosca = acrobat_plist.get(&apos;AcroSCA&apos;, False)
	print(f&quot;AcroSCA value: {acrosca}&quot;)
	return acrosca is True

def main():
	# Check if Adobe Acrobat is installed and the AcroSCA key is True
	print(&quot;Checking if Adobe Acrobat is installed and AcroSCA key is True...&quot;)
	if check_acrobat_installed():
		print(&quot;AcroSCA key is True Unified App is installed. Exiting Install...&quot;)
		sys.exit(1)

	# Check if Adobe Acrobat Reader is installed
	reader_app_path = &apos;/Applications/Adobe Acrobat Reader.app&apos;
	reader_plist_path = os.path.join(reader_app_path, &apos;Contents&apos;, &apos;Info.plist&apos;)

	# If Adobe Acrobat Reader.app is not installed, exit with status 0
	if not os.path.exists(reader_app_path):
		print(&quot;Adobe Acrobat Reader is not installed. Continuing with Install...&quot;)
		sys.exit(0)

	# Read the version of Adobe Acrobat Reader
	print(f&quot;Adobe Acrobat Reader is installed. Reading version from: {reader_plist_path}...&quot;)
	reader_plist = read_plist(reader_plist_path)
	if reader_plist is None:
		print(&quot;Failed to read Info.plist for Adobe Acrobat Reader.&quot;)
		sys.exit(0)

	reader_version = reader_plist.get(&apos;CFBundleShortVersionString&apos;, None)
	if not reader_version:
		print(&quot;No version found for Adobe Acrobat Reader. Continuing with Install...&quot;)
		sys.exit(0)

	print(f&quot;Found Adobe Acrobat Reader version: {reader_version}&quot;)

	# Get the threshold version
	threshold_version = &apos;%app_version%&apos;  # Replace with actual threshold version string

	if not threshold_version:
		print(&quot;Threshold version is not set. Exiting...&quot;)
		sys.exit(1)

	print(f&quot;Comparing against threshold version: {threshold_version}&quot;)

	# Use MunkiLooseVersion for comparing the versions
	try:
		reader_version_obj = LooseVersion(reader_version)
		threshold_version_obj = LooseVersion(threshold_version)

		# If Reader version is less than the threshold version, exit with status 0 (no installation needed)
		if reader_version_obj &lt; threshold_version_obj:
			print(f&quot;Adobe Acrobat Reader version {reader_version} is less than the threshold version {threshold_version}. Continuing with Install....&quot;)
			sys.exit(0)

		# Otherwise, exit with status 1 (indicating an installation is needed)
		print(f&quot;Adobe Acrobat Reader version {reader_version} is greater than or equal to the threshold version {threshold_version}. Exiting Install...&quot;)
		sys.exit(1)

	except ValueError as e:
		print(f&quot;Error comparing versions: {e}. Exiting...&quot;)
		sys.exit(1)

if __name__ == &apos;__main__&apos;:
	main()</string>
				</dict>
			</dict>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>pkg_path</key>
				<string>%pathname%</string>
				<key>repo_subdirectory</key>
				<string>%MUNKI_REPO_SUBDIR%</string>
			</dict>
			<key>Processor</key>
			<string>MunkiImporter</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>path_list</key>
				<array>
					<string>%RECIPE_CACHE_DIR%/pkg_unpack</string>
					<string>%RECIPE_CACHE_DIR%/application_payload</string>
				</array>
			</dict>
			<key>Processor</key>
			<string>PathDeleter</string>
		</dict>
	</array>
</dict>
</plist>
